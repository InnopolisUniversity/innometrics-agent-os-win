// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using APIClient.InnoMetricClient.Models;
using Microsoft.Rest;
using Microsoft.Rest.Serialization;
using Newtonsoft.Json;

namespace APIClient.InnoMetricClient
{
    /// <summary>
    ///     Service description
    /// </summary>
    public class InnoMetricClient : ServiceClient<InnoMetricClient>, IInnoMetricClient
    {
        /// <summary>
        ///     Initializes a new instance of the InnoMetricClient class.
        /// </summary>
        /// <param name='handlers'>
        ///     Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected InnoMetricClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        ///     Initializes a new instance of the InnoMetricClient class.
        /// </summary>
        /// <param name='rootHandler'>
        ///     Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        ///     Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected InnoMetricClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(
            rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        ///     Initializes a new instance of the InnoMetricClient class.
        /// </summary>
        /// <param name='baseUri'>
        ///     Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        ///     Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected InnoMetricClient(Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null) throw new ArgumentNullException("baseUri");

            BaseUri = baseUri;
        }

        /// <summary>
        ///     Initializes a new instance of the InnoMetricClient class.
        /// </summary>
        /// <param name='baseUri'>
        ///     Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        ///     Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        ///     Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected InnoMetricClient(Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) :
            this(rootHandler, handlers)
        {
            if (baseUri == null) throw new ArgumentNullException("baseUri");

            BaseUri = baseUri;
        }

        /// <summary>
        ///     Initializes a new instance of the InnoMetricClient class.
        /// </summary>
        /// <param name='credentials'>
        ///     Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        ///     Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public InnoMetricClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) :
            this(handlers)
        {
            if (credentials == null) throw new ArgumentNullException("credentials");

            Credentials = credentials;
            if (Credentials != null) Credentials.InitializeServiceClient(this);
        }

        /// <summary>
        ///     Initializes a new instance of the InnoMetricClient class.
        /// </summary>
        /// <param name='credentials'>
        ///     Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        ///     Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        ///     Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public InnoMetricClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler,
            params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null) throw new ArgumentNullException("credentials");

            Credentials = credentials;
            if (Credentials != null) Credentials.InitializeServiceClient(this);
        }

        /// <summary>
        ///     Initializes a new instance of the InnoMetricClient class.
        /// </summary>
        /// <param name='baseUri'>
        ///     Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        ///     Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        ///     Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public InnoMetricClient(Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers)
            : this(handlers)
        {
            if (baseUri == null) throw new ArgumentNullException("baseUri");

            if (credentials == null) throw new ArgumentNullException("credentials");

            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null) Credentials.InitializeServiceClient(this);
        }

        /// <summary>
        ///     Initializes a new instance of the InnoMetricClient class.
        /// </summary>
        /// <param name='baseUri'>
        ///     Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        ///     Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        ///     Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        ///     Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public InnoMetricClient(Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler,
            params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null) throw new ArgumentNullException("baseUri");

            if (credentials == null) throw new ArgumentNullException("credentials");

            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null) Credentials.InitializeServiceClient(this);
        }

        /// <summary>
        ///     The base URI of the service.
        /// </summary>
        public Uri BaseUri { get; set; }

        /// <summary>
        ///     Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        ///     Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        ///     Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; }

        /// <summary>
        ///     addAppCategory
        /// </summary>
        /// <param name='appCategoryRequest'>
        ///     appCategoryRequest
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<AppCategoryResponse>> AddAppCategoryUsingPOSTWithHttpMessagesAsync(
            AppCategoryRequest appCategoryRequest, string token = default,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (appCategoryRequest == null)
                throw new ValidationException(ValidationRules.CannotBeNull, "appCategoryRequest");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("token", token);
                tracingParameters.Add("appCategoryRequest", appCategoryRequest);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "AddAppCategoryUsingPOST", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Admin/Classification/App")
                .ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            if (appCategoryRequest != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(appCategoryRequest, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =
                    MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }

            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 201 && (int) _statusCode != 401 &&
                (int) _statusCode != 403 && (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<AppCategoryResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<AppCategoryResponse>(_responseContent,
                            DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     UpdateAppCategory
        /// </summary>
        /// <param name='appCategoryRequest'>
        ///     appCategoryRequest
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<AppCategoryResponse>> UpdateAppCategoryUsingPUTWithHttpMessagesAsync(
            AppCategoryRequest appCategoryRequest, string token = default,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (appCategoryRequest == null)
                throw new ValidationException(ValidationRules.CannotBeNull, "appCategoryRequest");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("token", token);
                tracingParameters.Add("appCategoryRequest", appCategoryRequest);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "UpdateAppCategoryUsingPUT", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Admin/Classification/App")
                .ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            if (appCategoryRequest != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(appCategoryRequest, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =
                    MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }

            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 201 && (int) _statusCode != 401 &&
                (int) _statusCode != 403 && (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<AppCategoryResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<AppCategoryResponse>(_responseContent,
                            DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     getAppCategoryById
        /// </summary>
        /// <param name='appId'>
        ///     AppId
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<AppCategoryResponse>> GetAppCategoryByIdUsingGETWithHttpMessagesAsync(
            int appId, string token = default, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("appId", appId);
                tracingParameters.Add("token", token);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAppCategoryByIdUsingGET", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")),
                "V1/Admin/Classification/App/{AppId}").ToString();
            _url = _url.Replace("{AppId}",
                Uri.EscapeDataString(SafeJsonConvert.SerializeObject(appId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 401 && (int) _statusCode != 403 &&
                (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<AppCategoryResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<AppCategoryResponse>(_responseContent,
                            DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     addCategory
        /// </summary>
        /// <param name='categoryRequest'>
        ///     categoryRequest
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<CategoryResponse>> AddCategoryUsingPOSTWithHttpMessagesAsync(
            CategoryRequest categoryRequest, string token = default,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (categoryRequest == null) throw new ValidationException(ValidationRules.CannotBeNull, "categoryRequest");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("token", token);
                tracingParameters.Add("categoryRequest", categoryRequest);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "AddCategoryUsingPOST", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")),
                "V1/Admin/Classification/Category").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            if (categoryRequest != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(categoryRequest, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =
                    MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }

            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 201 && (int) _statusCode != 401 &&
                (int) _statusCode != 403 && (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<CategoryResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<CategoryResponse>(_responseContent,
                            DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     UpdateCategory
        /// </summary>
        /// <param name='categoryRequest'>
        ///     categoryRequest
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<CategoryResponse>> UpdateCategoryUsingPUTWithHttpMessagesAsync(
            CategoryRequest categoryRequest, string token = default,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (categoryRequest == null) throw new ValidationException(ValidationRules.CannotBeNull, "categoryRequest");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("token", token);
                tracingParameters.Add("categoryRequest", categoryRequest);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "UpdateCategoryUsingPUT", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")),
                "V1/Admin/Classification/Category").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            if (categoryRequest != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(categoryRequest, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =
                    MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }

            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 201 && (int) _statusCode != 401 &&
                (int) _statusCode != 403 && (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<CategoryResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<CategoryResponse>(_responseContent,
                            DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     getCategoryById
        /// </summary>
        /// <param name='categoryId'>
        ///     CategoryId
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<CategoryResponse>> GetCategoryByIdUsingGETWithHttpMessagesAsync(
            int categoryId, string token = default, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("categoryId", categoryId);
                tracingParameters.Add("token", token);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetCategoryByIdUsingGET", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")),
                "V1/Admin/Classification/Category/{CategoryId}").ToString();
            _url = _url.Replace("{CategoryId}",
                Uri.EscapeDataString(SafeJsonConvert.SerializeObject(categoryId, SerializationSettings)
                    .Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 401 && (int) _statusCode != 403 &&
                (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<CategoryResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<CategoryResponse>(_responseContent,
                            DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     CreateMeasurementType
        /// </summary>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='measurementType'>
        ///     measurementType
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<MeasurementTypeResponse>>
            CreateMeasurementTypeUsingPOSTWithHttpMessagesAsync(string token, MeasurementTypeRequest measurementType,
                Dictionary<string, List<string>> customHeaders = null,
                CancellationToken cancellationToken = default)
        {
            if (token == null) throw new ValidationException(ValidationRules.CannotBeNull, "token");

            if (measurementType == null) throw new ValidationException(ValidationRules.CannotBeNull, "measurementType");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("token", token);
                tracingParameters.Add("measurementType", measurementType);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreateMeasurementTypeUsingPOST", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Admin/MeasurementType")
                .ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            if (measurementType != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(measurementType, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =
                    MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }

            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 201 && (int) _statusCode != 401 &&
                (int) _statusCode != 403 && (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<MeasurementTypeResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<MeasurementTypeResponse>(_responseContent,
                            DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     getActiveProjects
        /// </summary>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ProjectListResponse>> GetActiveProjectsUsingGETWithHttpMessagesAsync(
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetActiveProjectsUsingGET", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Admin/Project").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 401 && (int) _statusCode != 403 &&
                (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<ProjectListResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<ProjectListResponse>(_responseContent,
                            DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     CreateProject
        /// </summary>
        /// <param name='project'>
        ///     project
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ProjectResponse>> CreateProjectUsingPOSTWithHttpMessagesAsync(
            ProjectRequest project, string token = default,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (project == null) throw new ValidationException(ValidationRules.CannotBeNull, "project");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("token", token);
                tracingParameters.Add("project", project);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreateProjectUsingPOST", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Admin/Project").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            if (project != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(project, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =
                    MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }

            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 201 && (int) _statusCode != 401 &&
                (int) _statusCode != 403 && (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<ProjectResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<ProjectResponse>(_responseContent,
                            DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     updateProject
        /// </summary>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='project'>
        ///     project
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ProjectResponse>> UpdateProjectUsingPUTWithHttpMessagesAsync(
            string token, ProjectRequest project, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (token == null) throw new ValidationException(ValidationRules.CannotBeNull, "token");

            if (project == null) throw new ValidationException(ValidationRules.CannotBeNull, "project");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("token", token);
                tracingParameters.Add("project", project);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "UpdateProjectUsingPUT", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Admin/Project").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            if (project != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(project, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =
                    MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }

            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 201 && (int) _statusCode != 401 &&
                (int) _statusCode != 403 && (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<ProjectResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<ProjectResponse>(_responseContent,
                            DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     ListAllRoles
        /// </summary>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<Role>>> ListAllRolesUsingGETWithHttpMessagesAsync(string token,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (token == null) throw new ValidationException(ValidationRules.CannotBeNull, "token");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("token", token);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ListAllRolesUsingGET", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Admin/Role").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 401 && (int) _statusCode != 403 &&
                (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<IList<Role>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<IList<Role>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     CreateRole
        /// </summary>
        /// <param name='roleDescription'>
        ///     RoleDescription
        /// </param>
        /// <param name='roleId'>
        ///     RoleId
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<Role>> CreateRoleUsingPOSTWithHttpMessagesAsync(string roleDescription,
            string roleId, string token, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (roleDescription == null) throw new ValidationException(ValidationRules.CannotBeNull, "roleDescription");

            if (roleId == null) throw new ValidationException(ValidationRules.CannotBeNull, "roleId");

            if (token == null) throw new ValidationException(ValidationRules.CannotBeNull, "token");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("roleDescription", roleDescription);
                tracingParameters.Add("roleId", roleId);
                tracingParameters.Add("token", token);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreateRoleUsingPOST", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Admin/Role").ToString();
            var _queryParameters = new List<string>();
            if (roleDescription != null)
                _queryParameters.Add(string.Format("RoleDescription={0}", Uri.EscapeDataString(roleDescription)));

            if (roleId != null) _queryParameters.Add(string.Format("RoleId={0}", Uri.EscapeDataString(roleId)));

            if (_queryParameters.Count > 0) _url += "?" + string.Join("&", _queryParameters);

            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 201 && (int) _statusCode != 401 &&
                (int) _statusCode != 403 && (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<Role>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<Role>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     UpdateRole
        /// </summary>
        /// <param name='roleDescription'>
        ///     RoleDescription
        /// </param>
        /// <param name='roleId'>
        ///     RoleId
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<Role>> UpdateRoleUsingPUTWithHttpMessagesAsync(string roleDescription,
            string roleId, string token, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (roleDescription == null) throw new ValidationException(ValidationRules.CannotBeNull, "roleDescription");

            if (roleId == null) throw new ValidationException(ValidationRules.CannotBeNull, "roleId");

            if (token == null) throw new ValidationException(ValidationRules.CannotBeNull, "token");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("roleDescription", roleDescription);
                tracingParameters.Add("roleId", roleId);
                tracingParameters.Add("token", token);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "UpdateRoleUsingPUT", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Admin/Role").ToString();
            var _queryParameters = new List<string>();
            if (roleDescription != null)
                _queryParameters.Add(string.Format("RoleDescription={0}", Uri.EscapeDataString(roleDescription)));

            if (roleId != null) _queryParameters.Add(string.Format("RoleId={0}", Uri.EscapeDataString(roleId)));

            if (_queryParameters.Count > 0) _url += "?" + string.Join("&", _queryParameters);

            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 201 && (int) _statusCode != 401 &&
                (int) _statusCode != 403 && (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<Role>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<Role>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     GetRoleById
        /// </summary>
        /// <param name='roleId'>
        ///     RoleId
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<Role>> GetRoleByIdUsingGETWithHttpMessagesAsync(string roleId,
            string token, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (roleId == null) throw new ValidationException(ValidationRules.CannotBeNull, "roleId");

            if (token == null) throw new ValidationException(ValidationRules.CannotBeNull, "token");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("roleId", roleId);
                tracingParameters.Add("token", token);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetRoleByIdUsingGET", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Admin/Role/ById")
                .ToString();
            var _queryParameters = new List<string>();
            if (roleId != null) _queryParameters.Add(string.Format("RoleId={0}", Uri.EscapeDataString(roleId)));

            if (_queryParameters.Count > 0) _url += "?" + string.Join("&", _queryParameters);

            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 401 && (int) _statusCode != 403 &&
                (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<Role>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<Role>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     CreateUser
        /// </summary>
        /// <param name='user'>
        ///     user
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<UserRequest>> CreateUserUsingPOSTWithHttpMessagesAsync(UserRequest user,
            string token = default, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (user == null) throw new ValidationException(ValidationRules.CannotBeNull, "user");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("token", token);
                tracingParameters.Add("user", user);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreateUserUsingPOST", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Admin/User").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            if (user != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(user, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =
                    MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }

            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 201 && (int) _statusCode != 401 &&
                (int) _statusCode != 403 && (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<UserRequest>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<UserRequest>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     UpdateUserStatus
        /// </summary>
        /// <param name='isActive'>
        ///     IsActive
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='userId'>
        ///     UserId
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<bool?>> UpdateUserStatusUsingPUTWithHttpMessagesAsync(bool isActive,
            string token, string userId, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (token == null) throw new ValidationException(ValidationRules.CannotBeNull, "token");

            if (userId == null) throw new ValidationException(ValidationRules.CannotBeNull, "userId");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("isActive", isActive);
                tracingParameters.Add("token", token);
                tracingParameters.Add("userId", userId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "UpdateUserStatusUsingPUT", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Admin/User/UpdateStatus")
                .ToString();
            var _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("IsActive={0}",
                Uri.EscapeDataString(SafeJsonConvert.SerializeObject(isActive, SerializationSettings).Trim('"'))));
            if (userId != null) _queryParameters.Add(string.Format("UserId={0}", Uri.EscapeDataString(userId)));

            if (_queryParameters.Count > 0) _url += "?" + string.Join("&", _queryParameters);

            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 201 && (int) _statusCode != 401 &&
                (int) _statusCode != 403 && (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<bool?>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<bool?>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     getActiveUsers
        /// </summary>
        /// <param name='projectId'>
        ///     ProjectId
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<UserListResponse>> GetActiveUsersUsingGETWithHttpMessagesAsync(
            string projectId = default, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("projectId", projectId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetActiveUsersUsingGET", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Admin/Users").ToString();
            var _queryParameters = new List<string>();
            if (projectId != null)
                _queryParameters.Add(string.Format("ProjectId={0}", Uri.EscapeDataString(projectId)));

            if (_queryParameters.Count > 0) _url += "?" + string.Join("&", _queryParameters);

            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 401 && (int) _statusCode != 403 &&
                (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<UserListResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<UserListResponse>(_responseContent,
                            DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     InviteUserProject
        /// </summary>
        /// <param name='manager'>
        ///     Manager
        /// </param>
        /// <param name='projectName'>
        ///     ProjectName
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='userEmail'>
        ///     UserEmail
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<bool?>> InviteUserProjectUsingPOSTWithHttpMessagesAsync(bool manager,
            string projectName, string token, string userEmail, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (projectName == null) throw new ValidationException(ValidationRules.CannotBeNull, "projectName");

            if (token == null) throw new ValidationException(ValidationRules.CannotBeNull, "token");

            if (userEmail == null) throw new ValidationException(ValidationRules.CannotBeNull, "userEmail");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("manager", manager);
                tracingParameters.Add("projectName", projectName);
                tracingParameters.Add("token", token);
                tracingParameters.Add("userEmail", userEmail);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "InviteUserProjectUsingPOST", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")),
                "V1/Admin/project/{ProjectName}").ToString();
            _url = _url.Replace("{ProjectName}", Uri.EscapeDataString(projectName));
            var _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("Manager={0}",
                Uri.EscapeDataString(SafeJsonConvert.SerializeObject(manager, SerializationSettings).Trim('"'))));
            if (userEmail != null)
                _queryParameters.Add(string.Format("UserEmail={0}", Uri.EscapeDataString(userEmail)));

            if (_queryParameters.Count > 0) _url += "?" + string.Join("&", _queryParameters);

            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 201 && (int) _statusCode != 401 &&
                (int) _statusCode != 403 && (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<bool?>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<bool?>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     getReportActivities
        /// </summary>
        /// <param name='email'>
        ///     email
        /// </param>
        /// <param name='maxDate'>
        ///     max_Date
        /// </param>
        /// <param name='minDate'>
        ///     min_Date
        /// </param>
        /// <param name='projectID'>
        ///     projectID
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ActivitiesReportByUserResponse>>
            GetReportActivitiesUsingGETWithHttpMessagesAsync(string email = default,
                DateTime? maxDate = default, DateTime? minDate = default,
                string projectID = default, Dictionary<string, List<string>> customHeaders = null,
                CancellationToken cancellationToken = default)
        {
            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("email", email);
                tracingParameters.Add("maxDate", maxDate);
                tracingParameters.Add("minDate", minDate);
                tracingParameters.Add("projectID", projectID);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetReportActivitiesUsingGET", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Reports/activitiesReport")
                .ToString();
            var _queryParameters = new List<string>();
            if (email != null) _queryParameters.Add(string.Format("email={0}", Uri.EscapeDataString(email)));

            if (maxDate != null)
                _queryParameters.Add(string.Format("max_Date={0}",
                    Uri.EscapeDataString(SafeJsonConvert.SerializeObject(maxDate, SerializationSettings)
                        .Trim('"'))));

            if (minDate != null)
                _queryParameters.Add(string.Format("min_Date={0}",
                    Uri.EscapeDataString(SafeJsonConvert.SerializeObject(minDate, SerializationSettings)
                        .Trim('"'))));

            if (projectID != null)
                _queryParameters.Add(string.Format("projectID={0}", Uri.EscapeDataString(projectID)));

            if (_queryParameters.Count > 0) _url += "?" + string.Join("&", _queryParameters);

            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 401 && (int) _statusCode != 403 &&
                (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<ActivitiesReportByUserResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<ActivitiesReportByUserResponse>(_responseContent,
                            DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     getCumulativeReport
        /// </summary>
        /// <param name='email'>
        ///     email
        /// </param>
        /// <param name='maxDate'>
        ///     max_Date
        /// </param>
        /// <param name='minDate'>
        ///     min_Date
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<CumulativeReportResponse>>
            GetCumulativeReportUsingGETWithHttpMessagesAsync(string email = default,
                DateTime? maxDate = default, DateTime? minDate = default,
                Dictionary<string, List<string>> customHeaders = null,
                CancellationToken cancellationToken = default)
        {
            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("email", email);
                tracingParameters.Add("maxDate", maxDate);
                tracingParameters.Add("minDate", minDate);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetCumulativeReportUsingGET", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Reports/cumulativeReport")
                .ToString();
            var _queryParameters = new List<string>();
            if (email != null) _queryParameters.Add(string.Format("email={0}", Uri.EscapeDataString(email)));

            if (maxDate != null)
                _queryParameters.Add(string.Format("max_Date={0}",
                    Uri.EscapeDataString(SafeJsonConvert.SerializeObject(maxDate, SerializationSettings)
                        .Trim('"'))));

            if (minDate != null)
                _queryParameters.Add(string.Format("min_Date={0}",
                    Uri.EscapeDataString(SafeJsonConvert.SerializeObject(minDate, SerializationSettings)
                        .Trim('"'))));

            if (_queryParameters.Count > 0) _url += "?" + string.Join("&", _queryParameters);

            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 401 && (int) _statusCode != 403 &&
                (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<CumulativeReportResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<CumulativeReportResponse>(_responseContent,
                            DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     getTimeReport
        /// </summary>
        /// <param name='email'>
        ///     email
        /// </param>
        /// <param name='maxDate'>
        ///     max_Date
        /// </param>
        /// <param name='minDate'>
        ///     min_Date
        /// </param>
        /// <param name='projectID'>
        ///     projectID
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<TimeReportResponse>> GetTimeReportUsingGETWithHttpMessagesAsync(
            string email = default, DateTime? maxDate = default,
            DateTime? minDate = default, string projectID = default,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("email", email);
                tracingParameters.Add("maxDate", maxDate);
                tracingParameters.Add("minDate", minDate);
                tracingParameters.Add("projectID", projectID);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTimeReportUsingGET", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/Reports/timeReport")
                .ToString();
            var _queryParameters = new List<string>();
            if (email != null) _queryParameters.Add(string.Format("email={0}", Uri.EscapeDataString(email)));

            if (maxDate != null)
                _queryParameters.Add(string.Format("max_Date={0}",
                    Uri.EscapeDataString(SafeJsonConvert.SerializeObject(maxDate, SerializationSettings)
                        .Trim('"'))));

            if (minDate != null)
                _queryParameters.Add(string.Format("min_Date={0}",
                    Uri.EscapeDataString(SafeJsonConvert.SerializeObject(minDate, SerializationSettings)
                        .Trim('"'))));

            if (projectID != null)
                _queryParameters.Add(string.Format("projectID={0}", Uri.EscapeDataString(projectID)));

            if (_queryParameters.Count > 0) _url += "?" + string.Join("&", _queryParameters);

            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 401 && (int) _statusCode != 403 &&
                (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<TimeReportResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<TimeReportResponse>(_responseContent,
                            DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     getActivities
        /// </summary>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='email'>
        ///     email
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<Report>> GetActivitiesUsingGETWithHttpMessagesAsync(string token,
            string email, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (token == null) throw new ValidationException(ValidationRules.CannotBeNull, "token");

            if (email == null) throw new ValidationException(ValidationRules.CannotBeNull, "email");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("token", token);
                tracingParameters.Add("email", email);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetActivitiesUsingGET", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/activity").ToString();
            var _queryParameters = new List<string>();
            if (email != null) _queryParameters.Add(string.Format("email={0}", Uri.EscapeDataString(email)));

            if (_queryParameters.Count > 0) _url += "?" + string.Join("&", _queryParameters);

            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 401 && (int) _statusCode != 403 &&
                (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<Report>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<Report>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     addReport
        /// </summary>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='report'>
        ///     report
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> AddReportUsingPOSTWithHttpMessagesAsync(string token,
            Report report, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (token == null) throw new ValidationException(ValidationRules.CannotBeNull, "token");

            if (report == null) throw new ValidationException(ValidationRules.CannotBeNull, "report");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("token", token);
                tracingParameters.Add("report", report);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "AddReportUsingPOST", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/activity").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            if (report != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(report, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =
                    MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }

            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 201 && (int) _statusCode != 401 &&
                (int) _statusCode != 403 && (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<object>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     deleteActivity
        /// </summary>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='activityId'>
        ///     activity_id
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> DeleteActivityUsingDELETEWithHttpMessagesAsync(string token,
            int activityId, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (token == null) throw new ValidationException(ValidationRules.CannotBeNull, "token");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("token", token);
                tracingParameters.Add("activityId", activityId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "DeleteActivityUsingDELETE", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/activity").ToString();
            var _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("activity_id={0}",
                Uri.EscapeDataString(SafeJsonConvert.SerializeObject(activityId, SerializationSettings)
                    .Trim('"'))));
            if (_queryParameters.Count > 0) _url += "?" + string.Join("&", _queryParameters);

            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("DELETE");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 204 && (int) _statusCode != 401 &&
                (int) _statusCode != 403)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<object>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     addProcessReport
        /// </summary>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='report'>
        ///     report
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> AddProcessReportUsingPOSTWithHttpMessagesAsync(string token,
            AddProcessReportRequest report, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (token == null) throw new ValidationException(ValidationRules.CannotBeNull, "token");

            if (report == null) throw new ValidationException(ValidationRules.CannotBeNull, "report");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("token", token);
                tracingParameters.Add("report", report);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "AddProcessReportUsingPOST", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "V1/process").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (token != null)
            {
                if (_httpRequest.Headers.Contains("Token")) _httpRequest.Headers.Remove("Token");

                _httpRequest.Headers.TryAddWithoutValidation("Token", token);
            }

            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            if (report != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(report, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =
                    MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }

            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 201 && (int) _statusCode != 401 &&
                (int) _statusCode != 403 && (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<object>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     login
        /// </summary>
        /// <param name='authenticationRequest'>
        ///     authenticationRequest
        /// </param>
        /// <param name='customHeaders'>
        ///     Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        /// <return>
        ///     A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> LoginUsingPOSTWithHttpMessagesAsync(
            AuthRequest authenticationRequest, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default)
        {
            if (authenticationRequest == null)
                throw new ValidationException(ValidationRules.CannotBeNull, "authenticationRequest");

            // Tracing
            var _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                var tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("authenticationRequest", authenticationRequest);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "LoginUsingPOST", tracingParameters);
            }

            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "login").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
                foreach (var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key)) _httpRequest.Headers.Remove(_header.Key);

                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }

            // Serialize Request
            string _requestContent = null;
            if (authenticationRequest != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(authenticationRequest, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =
                    MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }

            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (_shouldTrace) ServiceClientTracing.SendRequest(_invocationId, _httpRequest);

            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace) ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);

            var _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int) _statusCode != 200 && (int) _statusCode != 201 && (int) _statusCode != 401 &&
                (int) _statusCode != 403 && (int) _statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'",
                    _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace) ServiceClientTracing.Error(_invocationId, ex);

                _httpRequest.Dispose();
                if (_httpResponse != null) _httpResponse.Dispose();

                throw ex;
            }

            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int) _statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body =
                        SafeJsonConvert.DeserializeObject<object>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null) _httpResponse.Dispose();

                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }

            if (_shouldTrace) ServiceClientTracing.Exit(_invocationId, _result);

            return _result;
        }

        /// <summary>
        ///     An optional partial-method to perform custom initialization.
        /// </summary>
        private void CustomInitialize()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        ///     Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            BaseUri = new Uri("http://innometric.guru:9091/");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Formatting.Indented,
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                {
                    new Iso8601TimeSpanConverter()
                }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                {
                    new Iso8601TimeSpanConverter()
                }
            };
            //CustomInitialize();
        }
    }
}