// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using APIClient.InnoMetricClient.Models;
using Microsoft.Rest;
using Newtonsoft.Json;

namespace APIClient.InnoMetricClient
{
    /// <summary>
    ///     Service description
    /// </summary>
    public interface IInnoMetricClient : IDisposable
    {
        /// <summary>
        ///     The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        ///     Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        ///     Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        ///     Subscription credentials which uniquely identify client
        ///     subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        ///     addAppCategory
        /// </summary>
        /// <param name='appCategoryRequest'>
        ///     appCategoryRequest
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AppCategoryResponse>> AddAppCategoryUsingPOSTWithHttpMessagesAsync(
            AppCategoryRequest appCategoryRequest, string token = default,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     UpdateAppCategory
        /// </summary>
        /// <param name='appCategoryRequest'>
        ///     appCategoryRequest
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AppCategoryResponse>> UpdateAppCategoryUsingPUTWithHttpMessagesAsync(
            AppCategoryRequest appCategoryRequest, string token = default,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     getAppCategoryById
        /// </summary>
        /// <param name='appId'>
        ///     AppId
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AppCategoryResponse>> GetAppCategoryByIdUsingGETWithHttpMessagesAsync(int appId,
            string token = default, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     addCategory
        /// </summary>
        /// <param name='categoryRequest'>
        ///     categoryRequest
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CategoryResponse>> AddCategoryUsingPOSTWithHttpMessagesAsync(
            CategoryRequest categoryRequest, string token = default,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     UpdateCategory
        /// </summary>
        /// <param name='categoryRequest'>
        ///     categoryRequest
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CategoryResponse>> UpdateCategoryUsingPUTWithHttpMessagesAsync(
            CategoryRequest categoryRequest, string token = default,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     getCategoryById
        /// </summary>
        /// <param name='categoryId'>
        ///     CategoryId
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CategoryResponse>> GetCategoryByIdUsingGETWithHttpMessagesAsync(int categoryId,
            string token = default, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     CreateMeasurementType
        /// </summary>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='measurementType'>
        ///     measurementType
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MeasurementTypeResponse>> CreateMeasurementTypeUsingPOSTWithHttpMessagesAsync(
            string token, MeasurementTypeRequest measurementType, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     getActiveProjects
        /// </summary>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProjectListResponse>> GetActiveProjectsUsingGETWithHttpMessagesAsync(
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     CreateProject
        /// </summary>
        /// <param name='project'>
        ///     project
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProjectResponse>> CreateProjectUsingPOSTWithHttpMessagesAsync(ProjectRequest project,
            string token = default, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     updateProject
        /// </summary>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='project'>
        ///     project
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProjectResponse>> UpdateProjectUsingPUTWithHttpMessagesAsync(string token,
            ProjectRequest project, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     ListAllRoles
        /// </summary>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Role>>> ListAllRolesUsingGETWithHttpMessagesAsync(string token,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     CreateRole
        /// </summary>
        /// <param name='roleDescription'>
        ///     RoleDescription
        /// </param>
        /// <param name='roleId'>
        ///     RoleId
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Role>> CreateRoleUsingPOSTWithHttpMessagesAsync(string roleDescription,
            string roleId, string token, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     UpdateRole
        /// </summary>
        /// <param name='roleDescription'>
        ///     RoleDescription
        /// </param>
        /// <param name='roleId'>
        ///     RoleId
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Role>> UpdateRoleUsingPUTWithHttpMessagesAsync(string roleDescription, string roleId,
            string token, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     GetRoleById
        /// </summary>
        /// <param name='roleId'>
        ///     RoleId
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Role>> GetRoleByIdUsingGETWithHttpMessagesAsync(string roleId, string token,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     CreateUser
        /// </summary>
        /// <param name='user'>
        ///     user
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserRequest>> CreateUserUsingPOSTWithHttpMessagesAsync(UserRequest user,
            string token = default, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     UpdateUserStatus
        /// </summary>
        /// <param name='isActive'>
        ///     IsActive
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='userId'>
        ///     UserId
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool?>> UpdateUserStatusUsingPUTWithHttpMessagesAsync(bool isActive, string token,
            string userId, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     getActiveUsers
        /// </summary>
        /// <param name='projectId'>
        ///     ProjectId
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserListResponse>> GetActiveUsersUsingGETWithHttpMessagesAsync(
            string projectId = default, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     InviteUserProject
        /// </summary>
        /// <param name='manager'>
        ///     Manager
        /// </param>
        /// <param name='projectName'>
        ///     ProjectName
        /// </param>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='userEmail'>
        ///     UserEmail
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool?>> InviteUserProjectUsingPOSTWithHttpMessagesAsync(bool manager,
            string projectName, string token, string userEmail, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     getReportActivities
        /// </summary>
        /// <param name='email'>
        ///     email
        /// </param>
        /// <param name='maxDate'>
        ///     max_Date
        /// </param>
        /// <param name='minDate'>
        ///     min_Date
        /// </param>
        /// <param name='projectID'>
        ///     projectID
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ActivitiesReportByUserResponse>> GetReportActivitiesUsingGETWithHttpMessagesAsync(
            string email = default, DateTime? maxDate = default,
            DateTime? minDate = default, string projectID = default,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     getCumulativeReport
        /// </summary>
        /// <param name='email'>
        ///     email
        /// </param>
        /// <param name='maxDate'>
        ///     max_Date
        /// </param>
        /// <param name='minDate'>
        ///     min_Date
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CumulativeReportResponse>> GetCumulativeReportUsingGETWithHttpMessagesAsync(
            string email = default, DateTime? maxDate = default,
            DateTime? minDate = default, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     getTimeReport
        /// </summary>
        /// <param name='email'>
        ///     email
        /// </param>
        /// <param name='maxDate'>
        ///     max_Date
        /// </param>
        /// <param name='minDate'>
        ///     min_Date
        /// </param>
        /// <param name='projectID'>
        ///     projectID
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TimeReportResponse>> GetTimeReportUsingGETWithHttpMessagesAsync(
            string email = default, DateTime? maxDate = default,
            DateTime? minDate = default, string projectID = default,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     getActivities
        /// </summary>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='email'>
        ///     email
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Report>> GetActivitiesUsingGETWithHttpMessagesAsync(string token, string email,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     addReport
        /// </summary>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='report'>
        ///     report
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> AddReportUsingPOSTWithHttpMessagesAsync(string token, Report report,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     deleteActivity
        /// </summary>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='activityId'>
        ///     activity_id
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteActivityUsingDELETEWithHttpMessagesAsync(string token, int activityId,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     addProcessReport
        /// </summary>
        /// <param name='token'>
        ///     Token
        /// </param>
        /// <param name='report'>
        ///     report
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> AddProcessReportUsingPOSTWithHttpMessagesAsync(string token,
            AddProcessReportRequest report, Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     login
        /// </summary>
        /// <param name='authenticationRequest'>
        ///     authenticationRequest
        /// </param>
        /// <param name='customHeaders'>
        ///     The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        ///     The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> LoginUsingPOSTWithHttpMessagesAsync(AuthRequest authenticationRequest,
            Dictionary<string, List<string>> customHeaders = null,
            CancellationToken cancellationToken = default);
    }
}