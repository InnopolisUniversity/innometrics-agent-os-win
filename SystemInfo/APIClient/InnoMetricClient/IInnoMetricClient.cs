// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace InnoMetric
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Service description
    /// </summary>
    public partial interface IInnoMetricClient : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


            /// <summary>
        /// CreateMeasurementType
        /// </summary>
        /// <param name='token'>
        /// Token
        /// </param>
        /// <param name='measurementType'>
        /// measurementType
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MeasurementTypeResponse>> CreateMeasurementTypeUsingPOSTWithHttpMessagesAsync(string token, MeasurementTypeRequest measurementType, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// ListAllRoles
        /// </summary>
        /// <param name='token'>
        /// Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Role>>> ListAllRolesUsingGETWithHttpMessagesAsync(string token, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// CreateRole
        /// </summary>
        /// <param name='roleDescription'>
        /// RoleDescription
        /// </param>
        /// <param name='roleId'>
        /// RoleId
        /// </param>
        /// <param name='token'>
        /// Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Role>> CreateRoleUsingPOSTWithHttpMessagesAsync(string roleDescription, string roleId, string token, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// UpdateRole
        /// </summary>
        /// <param name='roleDescription'>
        /// RoleDescription
        /// </param>
        /// <param name='roleId'>
        /// RoleId
        /// </param>
        /// <param name='token'>
        /// Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Role>> UpdateRoleUsingPUTWithHttpMessagesAsync(string roleDescription, string roleId, string token, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetRoleById
        /// </summary>
        /// <param name='roleId'>
        /// RoleId
        /// </param>
        /// <param name='token'>
        /// Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Role>> GetRoleByIdUsingGETWithHttpMessagesAsync(string roleId, string token, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// CreateUser
        /// </summary>
        /// <param name='user'>
        /// user
        /// </param>
        /// <param name='token'>
        /// Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserRequest>> CreateUserUsingPOSTWithHttpMessagesAsync(UserRequest user, string token = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// UpdateUserStatus
        /// </summary>
        /// <param name='isActive'>
        /// IsActive
        /// </param>
        /// <param name='token'>
        /// Token
        /// </param>
        /// <param name='userId'>
        /// UserId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool?>> UpdateUserStatusUsingPUTWithHttpMessagesAsync(bool isActive, string token, string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// CreateProject
        /// </summary>
        /// <param name='token'>
        /// Token
        /// </param>
        /// <param name='name'>
        /// name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProjectResponse>> CreateProjectUsingPOSTWithHttpMessagesAsync(string token, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// InviteUserProject
        /// </summary>
        /// <param name='manager'>
        /// Manager
        /// </param>
        /// <param name='projectName'>
        /// ProjectName
        /// </param>
        /// <param name='token'>
        /// Token
        /// </param>
        /// <param name='userEmail'>
        /// UserEmail
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool?>> InviteUserProjectUsingPOSTWithHttpMessagesAsync(bool manager, string projectName, string token, string userEmail, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getActivities
        /// </summary>
        /// <param name='token'>
        /// Token
        /// </param>
        /// <param name='amountToReturn'>
        /// amount_to_return
        /// </param>
        /// <param name='endTime'>
        /// end_time
        /// </param>
        /// <param name='filters'>
        /// filters
        /// </param>
        /// <param name='offset'>
        /// offset
        /// </param>
        /// <param name='startTime'>
        /// start_time
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Report>>> GetActivitiesUsingGETWithHttpMessagesAsync(string token, int amountToReturn, DateTime endTime, string filters, int offset, DateTime startTime, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// addReport
        /// </summary>
        /// <param name='token'>
        /// Token
        /// </param>
        /// <param name='report'>
        /// report
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> AddReportUsingPOSTWithHttpMessagesAsync(string token, Report report, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// deleteActivity
        /// </summary>
        /// <param name='token'>
        /// Token
        /// </param>
        /// <param name='activityId'>
        /// activity_id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteActivityUsingDELETEWithHttpMessagesAsync(string token, int activityId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getActivitiesByProject
        /// </summary>
        /// <param name='projectName'>
        /// ProjectName
        /// </param>
        /// <param name='token'>
        /// Token
        /// </param>
        /// <param name='amountToReturn'>
        /// amount_to_return
        /// </param>
        /// <param name='endTime'>
        /// end_time
        /// </param>
        /// <param name='filters'>
        /// filters
        /// </param>
        /// <param name='offset'>
        /// offset
        /// </param>
        /// <param name='startTime'>
        /// start_time
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Report>>> GetActivitiesByProjectUsingGETWithHttpMessagesAsync(string projectName, string token, int amountToReturn, DateTime endTime, string filters, int offset, DateTime startTime, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// login
        /// </summary>
        /// <param name='authenticationRequest'>
        /// authenticationRequest
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> LoginUsingPOSTWithHttpMessagesAsync(AuthRequest authenticationRequest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
