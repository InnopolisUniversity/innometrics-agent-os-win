// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace InnoMetric
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for InnoMetricClient.
    /// </summary>
    public static partial class InnoMetricClientExtensions
    {
            /// <summary>
            /// addAppCategory
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appCategoryRequest'>
            /// appCategoryRequest
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            public static AppCategoryResponse AddAppCategoryUsingPOST(this IInnoMetricClient operations, AppCategoryRequest appCategoryRequest, string token = default(string))
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).AddAppCategoryUsingPOSTAsync(appCategoryRequest, token), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// addAppCategory
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appCategoryRequest'>
            /// appCategoryRequest
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppCategoryResponse> AddAppCategoryUsingPOSTAsync(this IInnoMetricClient operations, AppCategoryRequest appCategoryRequest, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddAppCategoryUsingPOSTWithHttpMessagesAsync(appCategoryRequest, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UpdateAppCategory
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appCategoryRequest'>
            /// appCategoryRequest
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            public static AppCategoryResponse UpdateAppCategoryUsingPUT(this IInnoMetricClient operations, AppCategoryRequest appCategoryRequest, string token = default(string))
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).UpdateAppCategoryUsingPUTAsync(appCategoryRequest, token), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// UpdateAppCategory
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appCategoryRequest'>
            /// appCategoryRequest
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppCategoryResponse> UpdateAppCategoryUsingPUTAsync(this IInnoMetricClient operations, AppCategoryRequest appCategoryRequest, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAppCategoryUsingPUTWithHttpMessagesAsync(appCategoryRequest, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getAppCategoryById
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// AppId
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            public static AppCategoryResponse GetAppCategoryByIdUsingGET(this IInnoMetricClient operations, int appId, string token = default(string))
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).GetAppCategoryByIdUsingGETAsync(appId, token), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// getAppCategoryById
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// AppId
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppCategoryResponse> GetAppCategoryByIdUsingGETAsync(this IInnoMetricClient operations, int appId, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppCategoryByIdUsingGETWithHttpMessagesAsync(appId, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// addCategory
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryRequest'>
            /// categoryRequest
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            public static CategoryResponse AddCategoryUsingPOST(this IInnoMetricClient operations, CategoryRequest categoryRequest, string token = default(string))
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).AddCategoryUsingPOSTAsync(categoryRequest, token), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// addCategory
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryRequest'>
            /// categoryRequest
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CategoryResponse> AddCategoryUsingPOSTAsync(this IInnoMetricClient operations, CategoryRequest categoryRequest, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddCategoryUsingPOSTWithHttpMessagesAsync(categoryRequest, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UpdateCategory
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryRequest'>
            /// categoryRequest
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            public static CategoryResponse UpdateCategoryUsingPUT(this IInnoMetricClient operations, CategoryRequest categoryRequest, string token = default(string))
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).UpdateCategoryUsingPUTAsync(categoryRequest, token), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// UpdateCategory
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryRequest'>
            /// categoryRequest
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CategoryResponse> UpdateCategoryUsingPUTAsync(this IInnoMetricClient operations, CategoryRequest categoryRequest, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCategoryUsingPUTWithHttpMessagesAsync(categoryRequest, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getCategoryById
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryId'>
            /// CategoryId
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            public static CategoryResponse GetCategoryByIdUsingGET(this IInnoMetricClient operations, int categoryId, string token = default(string))
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).GetCategoryByIdUsingGETAsync(categoryId, token), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// getCategoryById
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryId'>
            /// CategoryId
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CategoryResponse> GetCategoryByIdUsingGETAsync(this IInnoMetricClient operations, int categoryId, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCategoryByIdUsingGETWithHttpMessagesAsync(categoryId, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CreateMeasurementType
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='measurementType'>
            /// measurementType
            /// </param>
            public static MeasurementTypeResponse CreateMeasurementTypeUsingPOST(this IInnoMetricClient operations, string token, MeasurementTypeRequest measurementType)
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).CreateMeasurementTypeUsingPOSTAsync(token, measurementType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateMeasurementType
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='measurementType'>
            /// measurementType
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MeasurementTypeResponse> CreateMeasurementTypeUsingPOSTAsync(this IInnoMetricClient operations, string token, MeasurementTypeRequest measurementType, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMeasurementTypeUsingPOSTWithHttpMessagesAsync(token, measurementType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getActiveProjects
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ProjectListResponse GetActiveProjectsUsingGET(this IInnoMetricClient operations)
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).GetActiveProjectsUsingGETAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// getActiveProjects
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProjectListResponse> GetActiveProjectsUsingGETAsync(this IInnoMetricClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActiveProjectsUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CreateProject
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='project'>
            /// project
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            public static ProjectResponse CreateProjectUsingPOST(this IInnoMetricClient operations, ProjectRequest project, string token = default(string))
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).CreateProjectUsingPOSTAsync(project, token), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateProject
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='project'>
            /// project
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProjectResponse> CreateProjectUsingPOSTAsync(this IInnoMetricClient operations, ProjectRequest project, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProjectUsingPOSTWithHttpMessagesAsync(project, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// updateProject
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='project'>
            /// project
            /// </param>
            public static ProjectResponse UpdateProjectUsingPUT(this IInnoMetricClient operations, string token, ProjectRequest project)
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).UpdateProjectUsingPUTAsync(token, project), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// updateProject
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='project'>
            /// project
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProjectResponse> UpdateProjectUsingPUTAsync(this IInnoMetricClient operations, string token, ProjectRequest project, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateProjectUsingPUTWithHttpMessagesAsync(token, project, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// ListAllRoles
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            public static IList<Role> ListAllRolesUsingGET(this IInnoMetricClient operations, string token)
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).ListAllRolesUsingGETAsync(token), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// ListAllRoles
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Role>> ListAllRolesUsingGETAsync(this IInnoMetricClient operations, string token, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllRolesUsingGETWithHttpMessagesAsync(token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CreateRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleDescription'>
            /// RoleDescription
            /// </param>
            /// <param name='roleId'>
            /// RoleId
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            public static Role CreateRoleUsingPOST(this IInnoMetricClient operations, string roleDescription, string roleId, string token)
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).CreateRoleUsingPOSTAsync(roleDescription, roleId, token), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleDescription'>
            /// RoleDescription
            /// </param>
            /// <param name='roleId'>
            /// RoleId
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Role> CreateRoleUsingPOSTAsync(this IInnoMetricClient operations, string roleDescription, string roleId, string token, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRoleUsingPOSTWithHttpMessagesAsync(roleDescription, roleId, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UpdateRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleDescription'>
            /// RoleDescription
            /// </param>
            /// <param name='roleId'>
            /// RoleId
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            public static Role UpdateRoleUsingPUT(this IInnoMetricClient operations, string roleDescription, string roleId, string token)
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).UpdateRoleUsingPUTAsync(roleDescription, roleId, token), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// UpdateRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleDescription'>
            /// RoleDescription
            /// </param>
            /// <param name='roleId'>
            /// RoleId
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Role> UpdateRoleUsingPUTAsync(this IInnoMetricClient operations, string roleDescription, string roleId, string token, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRoleUsingPUTWithHttpMessagesAsync(roleDescription, roleId, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetRoleById
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// RoleId
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            public static Role GetRoleByIdUsingGET(this IInnoMetricClient operations, string roleId, string token)
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).GetRoleByIdUsingGETAsync(roleId, token), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetRoleById
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// RoleId
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Role> GetRoleByIdUsingGETAsync(this IInnoMetricClient operations, string roleId, string token, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRoleByIdUsingGETWithHttpMessagesAsync(roleId, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CreateUser
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// user
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            public static UserRequest CreateUserUsingPOST(this IInnoMetricClient operations, UserRequest user, string token = default(string))
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).CreateUserUsingPOSTAsync(user, token), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateUser
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// user
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserRequest> CreateUserUsingPOSTAsync(this IInnoMetricClient operations, UserRequest user, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserUsingPOSTWithHttpMessagesAsync(user, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UpdateUserStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isActive'>
            /// IsActive
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='userId'>
            /// UserId
            /// </param>
            public static bool? UpdateUserStatusUsingPUT(this IInnoMetricClient operations, bool isActive, string token, string userId)
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).UpdateUserStatusUsingPUTAsync(isActive, token, userId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// UpdateUserStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isActive'>
            /// IsActive
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='userId'>
            /// UserId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> UpdateUserStatusUsingPUTAsync(this IInnoMetricClient operations, bool isActive, string token, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserStatusUsingPUTWithHttpMessagesAsync(isActive, token, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getActiveUsers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// ProjectId
            /// </param>
            public static UserListResponse GetActiveUsersUsingGET(this IInnoMetricClient operations, string projectId = default(string))
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).GetActiveUsersUsingGETAsync(projectId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// getActiveUsers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// ProjectId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserListResponse> GetActiveUsersUsingGETAsync(this IInnoMetricClient operations, string projectId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActiveUsersUsingGETWithHttpMessagesAsync(projectId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// InviteUserProject
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='manager'>
            /// Manager
            /// </param>
            /// <param name='projectName'>
            /// ProjectName
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='userEmail'>
            /// UserEmail
            /// </param>
            public static bool? InviteUserProjectUsingPOST(this IInnoMetricClient operations, bool manager, string projectName, string token, string userEmail)
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).InviteUserProjectUsingPOSTAsync(manager, projectName, token, userEmail), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// InviteUserProject
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='manager'>
            /// Manager
            /// </param>
            /// <param name='projectName'>
            /// ProjectName
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='userEmail'>
            /// UserEmail
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> InviteUserProjectUsingPOSTAsync(this IInnoMetricClient operations, bool manager, string projectName, string token, string userEmail, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InviteUserProjectUsingPOSTWithHttpMessagesAsync(manager, projectName, token, userEmail, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getReportActivities
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// email
            /// </param>
            /// <param name='maxDate'>
            /// max_Date
            /// </param>
            /// <param name='minDate'>
            /// min_Date
            /// </param>
            /// <param name='projectID'>
            /// projectID
            /// </param>
            public static ActivitiesReportByUserResponse GetReportActivitiesUsingGET(this IInnoMetricClient operations, string email = default(string), DateTime? maxDate = default(DateTime?), DateTime? minDate = default(DateTime?), string projectID = default(string))
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).GetReportActivitiesUsingGETAsync(email, maxDate, minDate, projectID), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// getReportActivities
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// email
            /// </param>
            /// <param name='maxDate'>
            /// max_Date
            /// </param>
            /// <param name='minDate'>
            /// min_Date
            /// </param>
            /// <param name='projectID'>
            /// projectID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActivitiesReportByUserResponse> GetReportActivitiesUsingGETAsync(this IInnoMetricClient operations, string email = default(string), DateTime? maxDate = default(DateTime?), DateTime? minDate = default(DateTime?), string projectID = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportActivitiesUsingGETWithHttpMessagesAsync(email, maxDate, minDate, projectID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getCumulativeReport
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// email
            /// </param>
            /// <param name='maxDate'>
            /// max_Date
            /// </param>
            /// <param name='minDate'>
            /// min_Date
            /// </param>
            public static CumulativeReportResponse GetCumulativeReportUsingGET(this IInnoMetricClient operations, string email = default(string), DateTime? maxDate = default(DateTime?), DateTime? minDate = default(DateTime?))
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).GetCumulativeReportUsingGETAsync(email, maxDate, minDate), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// getCumulativeReport
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// email
            /// </param>
            /// <param name='maxDate'>
            /// max_Date
            /// </param>
            /// <param name='minDate'>
            /// min_Date
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CumulativeReportResponse> GetCumulativeReportUsingGETAsync(this IInnoMetricClient operations, string email = default(string), DateTime? maxDate = default(DateTime?), DateTime? minDate = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCumulativeReportUsingGETWithHttpMessagesAsync(email, maxDate, minDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getTimeReport
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// email
            /// </param>
            /// <param name='maxDate'>
            /// max_Date
            /// </param>
            /// <param name='minDate'>
            /// min_Date
            /// </param>
            /// <param name='projectID'>
            /// projectID
            /// </param>
            public static TimeReportResponse GetTimeReportUsingGET(this IInnoMetricClient operations, string email = default(string), DateTime? maxDate = default(DateTime?), DateTime? minDate = default(DateTime?), string projectID = default(string))
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).GetTimeReportUsingGETAsync(email, maxDate, minDate, projectID), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// getTimeReport
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// email
            /// </param>
            /// <param name='maxDate'>
            /// max_Date
            /// </param>
            /// <param name='minDate'>
            /// min_Date
            /// </param>
            /// <param name='projectID'>
            /// projectID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimeReportResponse> GetTimeReportUsingGETAsync(this IInnoMetricClient operations, string email = default(string), DateTime? maxDate = default(DateTime?), DateTime? minDate = default(DateTime?), string projectID = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTimeReportUsingGETWithHttpMessagesAsync(email, maxDate, minDate, projectID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getActivities
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='email'>
            /// email
            /// </param>
            public static Report GetActivitiesUsingGET(this IInnoMetricClient operations, string token, string email)
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).GetActivitiesUsingGETAsync(token, email), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// getActivities
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='email'>
            /// email
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Report> GetActivitiesUsingGETAsync(this IInnoMetricClient operations, string token, string email, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActivitiesUsingGETWithHttpMessagesAsync(token, email, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// addReport
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='report'>
            /// report
            /// </param>
            public static object AddReportUsingPOST(this IInnoMetricClient operations, string token, Report report)
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).AddReportUsingPOSTAsync(token, report), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// addReport
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='report'>
            /// report
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddReportUsingPOSTAsync(this IInnoMetricClient operations, string token, Report report, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddReportUsingPOSTWithHttpMessagesAsync(token, report, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// deleteActivity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='activityId'>
            /// activity_id
            /// </param>
            public static object DeleteActivityUsingDELETE(this IInnoMetricClient operations, string token, int activityId)
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).DeleteActivityUsingDELETEAsync(token, activityId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// deleteActivity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='activityId'>
            /// activity_id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteActivityUsingDELETEAsync(this IInnoMetricClient operations, string token, int activityId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteActivityUsingDELETEWithHttpMessagesAsync(token, activityId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// addProcessReport
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='report'>
            /// report
            /// </param>
            public static object AddProcessReportUsingPOST(this IInnoMetricClient operations, string token, AddProcessReportRequest report)
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).AddProcessReportUsingPOSTAsync(token, report), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// addProcessReport
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token
            /// </param>
            /// <param name='report'>
            /// report
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddProcessReportUsingPOSTAsync(this IInnoMetricClient operations, string token, AddProcessReportRequest report, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddProcessReportUsingPOSTWithHttpMessagesAsync(token, report, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// login
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authenticationRequest'>
            /// authenticationRequest
            /// </param>
            public static object LoginUsingPOST(this IInnoMetricClient operations, AuthRequest authenticationRequest)
            {
                return Task.Factory.StartNew(s => ((IInnoMetricClient)s).LoginUsingPOSTAsync(authenticationRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// login
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authenticationRequest'>
            /// authenticationRequest
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> LoginUsingPOSTAsync(this IInnoMetricClient operations, AuthRequest authenticationRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoginUsingPOSTWithHttpMessagesAsync(authenticationRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
